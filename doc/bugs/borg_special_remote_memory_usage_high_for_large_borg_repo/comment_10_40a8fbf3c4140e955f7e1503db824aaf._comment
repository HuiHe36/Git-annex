[[!comment format=mdwn
 username="joey"
 subject="""comment 10"""
 date="2021-10-06T17:09:50Z"
 content="""
There is still a big PINNED spike though. I measured this memory use:

	115344 post listContents
	133816 post importKeys
	236676 post recordImportTree

listContents produces an `ImportableContents (ContentIdentifier, ByteSize)`
and that gets transformed through importKeys 
to `ImportableContents (Either Sha Key)`. The GC should be able to
free up the first as it's being traversed, but PINNED still goes up during
that, and memory increases by 20% or so.

Then recordImportTree calls mktreeitem and treeItemsToTree, which between
then double the memory.

So I think I understand where the memory use is, although why it's PINNED
is still not clear, and unpinning could still help. I did try converting
TopFilePath to ShortByteString, since TreeItems contain them, but it didn't
reduce the amount PINNED and actually used more memory.

To avoid the allocation entirely, it seems that borg's
listImportableContents would need to generate a Tree itself, rather than
using ImportableContents. And it could, probably fairly efficiently, but it
would not be able to reuse the tree import interface as it does now.

(borg could return a `ImportableContents (Either Sha Key)` more easily,
and still reuse part of the interface, but the conversion to that only
uses 20% or so of memory so it's not a big enough win. Also when I looked
at it, it was still not going to be an easy refactoring.)
"""]]
